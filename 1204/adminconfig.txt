import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Button,
  Stepper,
  Step,
  StepLabel,
  Snackbar,
  Alert,
} from '@mui/material';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import SaveIcon from '@mui/icons-material/Save';
// Your custom step components
import { OrganizationStep } from './AdminConfig/OrganizationStep';
import { ProjectsStep } from './AdminConfig/ProjectsStep';
import { TeamsAndMembersStep } from './AdminConfig/TeamsAndMembersStep';
import { TestConfigStep } from './AdminConfig/TestConfigStep';
import { ReviewStep } from './AdminConfig/ReviewStep';
// Import the service and types
import AdminConfigService, { 
  Project, 
  Team, 
  OrganizationConfig 
} from '../services/AdminConfigService';
// ----------- For the front-end states -----------
interface SonarConfig {
  sonarDomain: string;
  sonarProjects: string[];
}
interface TeamConfig {
  testItPaths: string[]; // Using the path format "projectId:suiteId:childSuiteId..."
  sonarQubeProjects: SonarConfig[];
}

const AdminConfig = () => {
  const [activeStep, setActiveStep] = useState(0);
  const steps = ['Organization', 'Projects', 'Teams & Members', 'Test Configuration', 'Review'];
  // ----- Form state -----
  const [selectedOrg, setSelectedOrg] = useState<string>('');
  const [selectedProjects, setSelectedProjects] = useState<Project[]>([]);
  const [projectTeams, setProjectTeams] = useState<Record<string, string[]>>({});
  const [teamMembers, setTeamMembers] = useState<Record<string, Record<string, string[]>>>({});
  // Step 3: Teams & Members
  const [currentProjectIndex, setCurrentProjectIndex] = useState(0);
  const [activeTeam, setActiveTeam] = useState<string>('');
  // Track "Select All" toggles
  const [selectAllStatus, setSelectAllStatus] = useState<Record<string, boolean>>({});
  // Mapping orgName -> orgId
  const [orgIdMap, setOrgIdMap] = useState<Record<string, string>>({});
  // Notifications
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] =
    useState<'success' | 'error' | 'info' | 'warning'>('success');
  // Data source from back-end
  const [organizations, setOrganizations] = useState<string[]>([]);
  const [projects, setProjects] = useState<Project[]>([]);
  const [teams, setTeams] = useState<Team[]>([]);
  // Each project's each team's test/sonar config
  // structure: teamConfigs[projectName][teamName] => { testItPaths: [...], sonarQubeProjects: [...] }
  const [teamConfigs, setTeamConfigs] = useState<
    Record<string, Record<string, TeamConfig>>
  >({});
  
  // ----------------------------
  //     On Mount / useEffects
  // ----------------------------
  useEffect(() => {
    const loadInitialTeams = async () => {
      try {
        const data = await AdminConfigService.fetchTeams();
        console.log('dataTeams', data);
        setTeams(data);
      } catch (error) {
        console.error('Error loading initial teams:', error);
      }
    };
    const loadInitialProjects = async () => {
      try {
        const data = await AdminConfigService.fetchProjects();
        console.log('dataProjects', data);
        setProjects(data);
      } catch (error) {
        console.error('Error loading initial Projects:', error);
      }
    };
    loadInitialProjects();
    loadInitialTeams();
  }, []);

  useEffect(() => {
    const loadInitialOrg = async () => {
      try {
        const data = await AdminConfigService.fetchOrganizationConfig();
        console.log('full data', data);
        // Extract unique organization names
        const orgNames = data.map((item: OrganizationConfig) => item.organization);
        console.log('Extracted organizations:', orgNames);
        // Create a mapping of organization => id
        const orgMap = data.reduce((acc: Record<string, string>, item: OrganizationConfig) => {
          acc[item.organization] = item.id;
          return acc;
        }, {});
        console.log('Organization ID mapping:', orgMap);
        setOrgIdMap(orgMap);
        setOrganizations(orgNames);
      } catch (error) {
        console.error('Error loading initial data:', error);
      }
    };
    if (activeStep === 0) {
      loadInitialOrg();
    }
    if (activeStep === 2) {
      setCurrentProjectIndex(0);
    }
    if (activeStep === 1) {
      setActiveTeam('');
    }
  }, [activeStep]);

  // Current project in the tab
  const currentProject = selectedProjects[currentProjectIndex]?.key || '';
  const currentProjectTeams = projectTeams[currentProject] || [];
  const allTeams = Object.values(projectTeams).flat();

  // If the user unchecks the currently active team, reset activeTeam
  useEffect(() => {
    if (activeTeam && !allTeams.includes(activeTeam)) {
      setActiveTeam('');
    }
  }, [allTeams, activeTeam]);

  // If project selection changed so currentProjectIndex is out of bounds
  useEffect(() => {
    if (selectedProjects.length > 0 && currentProjectIndex >= selectedProjects.length) {
      setCurrentProjectIndex(0);
    }
  }, [selectedProjects, currentProjectIndex]);

  // ----------------------------
  //        Helper getters
  // ----------------------------
  const getTeamMembersList = (teamName: string) => {
    const teamObj = teams.find(t => t.teamName === teamName);
    return teamObj ? teamObj.members.map(m => m.name) : [];
  };

  // ----------------------------
  //       Handlers
  // ----------------------------
  /** ORG handlers **/
  const handleOrgSelect = async (org: string) => {
    setSelectedOrg(org);
    const orgId = orgIdMap[org];
    console.log('orgIdMap', orgIdMap);
    console.log('orgId', orgId);
    // If the org is known, load existing config
    if (orgId) {
      try {
        const data = await AdminConfigService.fetchOrganizationConfigByOrg(org);
        console.log('data in mongoDB', data);
        // The "projects" in data
        const projectsData = data.projects;
        const selectedProjectKeys = Object.keys(projectsData);
        
        // Map the project data to match our Project interface
        const mappedProjects = selectedProjectKeys.map(key => ({
          id: projectsData[key].id || '',
          jiraId: projectsData[key].id || '',
          key: projectsData[key].projectName,
          name: projectsData[key].projectFullName || projectsData[key].projectName
        }));
        
        setSelectedProjects(mappedProjects);
        // Build up local structures
        const newProjectTeams: Record<string, string[]> = {};
        const newTeamMembers: Record<string, Record<string, string[]>> = {};
        const newTeamConfigs: Record<string, Record<string, TeamConfig>> = {};
        
        // For each project -> fill in teams
        Object.entries(projectsData).forEach(([projectKey, projectData]) => {
          const teamList = projectData.teams || [];
          const teamNames = teamList.map(team => team.name);
          newProjectTeams[projectKey] = teamNames;
          newTeamMembers[projectKey] = {};
          newTeamConfigs[projectKey] = {};
          
          teamList.forEach(team => {
            // Basic members
            newTeamMembers[projectKey][team.name] = team.members || [];
            
            // Test/sonar config
            newTeamConfigs[projectKey][team.name] = {
              // Handle both new format (testItPaths) and old format (testItProjects)
              testItPaths: team.testItPaths || convertOldFormatToNewFormat(team.testItProjects || []),
              sonarQubeProjects: (team.sonarQubeProjects || []).map(obj => {
                // each obj is { [sonarDomain]: [...projects...] }
                const [sonarDomain, sonarProjects] = Object.entries(obj)[0];
                return { sonarDomain, sonarProjects };
              })
            };
          });
        });
        
        // Update local states
        setProjectTeams(newProjectTeams);
        setTeamMembers(newTeamMembers);
        setTeamConfigs(newTeamConfigs);
        showSnackbar('Configuration loaded successfully', 'success');
      } catch (error) {
        console.error('Error loading saved mapping:', error);
        showSnackbar('Error loading saved mapping', 'error');
      }
    }
  };
  
  // Helper to convert old format { projectId: [suiteIds] } to new format ["projectId:suiteId1", "projectId:suiteId2"]
  const convertOldFormatToNewFormat = (testItProjects: Array<Record<string, string[]>>) => {
    const paths: string[] = [];
    
    testItProjects.forEach(projectObj => {
      const entries = Object.entries(projectObj);
      if (entries.length > 0) {
        const [projectId, suiteIds] = entries[0];
        // For each suite ID, create a path "projectId:suiteId"
        suiteIds.forEach(suiteId => {
          paths.push(`${projectId}:${suiteId}`);
        });
      }
    });
    
    return paths;
  };

  const handleDeleteOrg = async (orgId: string) => {
    // We have an ID -> try to delete it from DB
    const orgName = Object.keys(orgIdMap).find(k => orgIdMap[k] === orgId);
    if (!orgName) {
      // Not recognized in our local map
      setOrganizations(prev => prev.filter(o => o !== orgId));
      showSnackbar('Organization deleted successfully', 'success');
      return;
    }
    try {
      await AdminConfigService.deleteOrganizationConfig(orgId);
      // Remove from local state
      setOrganizations(prevOrgs => prevOrgs.filter(org => orgIdMap[org] !== orgId));
      showSnackbar('Organization deleted successfully', 'success');
    } catch (error) {
      console.error('Error deleting organization:', error);
      showSnackbar('Error deleting organization', 'error');
    }
  };

  const handleAddNewOrg = (newOrgName: string) => {
    if (newOrgName.trim()) {
      setOrganizations(prev => [...prev, newOrgName.trim()]);
      setSelectedOrg(newOrgName.trim());
      setSelectedProjects([]);
      setProjectTeams({});
      setTeamMembers({});
      showSnackbar(`Organization "${newOrgName.trim()}" has been added successfully`, 'success');
    }
  };

  /** PROJECTS handlers **/
  const handleProjectToggle = (project: Project) => {
    setSelectedProjects(prev => {
      if (prev.some(p => p.key === project.key)) {
        // Removing
        const updated = prev.filter(p => p.key !== project.key);
        // Also remove from projectTeams
        setProjectTeams(prevTeams => {
          const copy = { ...prevTeams };
          delete copy[project.key];
          return copy;
        });
        return updated;
      } else {
        return [...prev, project];
      }
    });
  };

  /** TEAMS & MEMBERS handlers **/
  const handleTeamCheckbox = (team: string, project: string) => {
    setProjectTeams(prev => {
      const alreadySelected = prev[project] || [];
      let updatedTeams: string[];
      if (alreadySelected.includes(team)) {
        // If already selected, remove it
        updatedTeams = alreadySelected.filter(t => t !== team);
        // Clear members
        setTeamMembers(prevMembers => {
          const copy = { ...prevMembers };
          delete copy[project][team];
          return copy;
        });
        // If that team was active, clear it
        if (team === activeTeam) setActiveTeam('');
      } else {
        // Add the team
        updatedTeams = [...alreadySelected, team];
        // Ensure we have an entry in teamMembers
        if (!teamMembers[project]) {
          setTeamMembers(prevMembers => ({
            ...prevMembers,
            [project]: {}
          }));
        }
        // Make it active
        setActiveTeam(team);
      }
      return { ...prev, [project]: updatedTeams };
    });
  };

  const handleSetActiveTeam = (team: string) => {
    // If team not selected, toggle it
    if (!currentProjectTeams.includes(team)) {
      handleTeamCheckbox(team, currentProject);
    } else {
      setActiveTeam(team);
    }
  };

  const handleTeamMemberToggle = (member: string, team: string, project: string) => {
    setTeamMembers(prev => {
      const projectObj = prev[project] || {};
      const current = projectObj[team] || [];
      const updated = current.includes(member)
        ? current.filter(m => m !== member)
        : [...current, member];
      return {
        ...prev,
        [project]: {
          ...projectObj,
          [team]: updated
        }
      };
    });
  };

  const handleToggleAllMembers = (team: string, project: string) => {
    const isAllSelected = selectAllStatus[`${project}-${team}`] || false;
    const allPossible = getTeamMembersList(team);
    setTeamMembers(prev => ({
      ...prev,
      [project]: {
        ...(prev[project] || {}),
        [team]: isAllSelected ? [] : allPossible
      }
    }));
    setSelectAllStatus(prev => ({
      ...prev,
      [`${project}-${team}`]: !isAllSelected
    }));
  };

  const handleProjectTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setCurrentProjectIndex(newValue);
    setActiveTeam('');
  };

  // ----------------------------
  //        Stepper
  // ----------------------------
  const handleNext = () => {
    if (isStepValid()) {
      if (activeStep === steps.length - 1) {
        // Final save
        saveConfiguration();
      } else {
        setActiveStep(prev => prev + 1);
      }
    } else {
      showValidationErrors();
    }
  };

  const handleBack = () => {
    setActiveStep(prev => prev - 1);
  };

  // ----------------------------
  //        Validation
  // ----------------------------
  const showValidationErrors = () => {
    let errorMessage = '';
    switch (activeStep) {
      case 0:
        errorMessage = 'Please select an organization';
        break;
      case 1:
        errorMessage = 'Please select at least one project';
        break;
      case 2: {
        // Each project must have >=1 team, each team >=1 member
        const eachProjectHasTeam = selectedProjects.every(
          project => (projectTeams[project.key]?.length || 0) > 0
        );
        const eachTeamHasMembers = selectedProjects.every(project =>
          projectTeams[project.key]?.every(team => (teamMembers[project.key]?.[team]?.length || 0) > 0)
        );
        if (!eachProjectHasTeam || !eachTeamHasMembers) {
          errorMessage =
            'Each project must have at least one team, and each team must have at least one member.';
        }
        break;
      }
      default:
        break;
    }
    if (errorMessage) {
      showSnackbar(errorMessage, 'warning');
    }
  };

  const isStepValid = (): boolean => {
    switch (activeStep) {
      case 0:
        return selectedOrg !== '';
      case 1:
        return selectedProjects.length > 0;
      case 2: {
        const eachProjectHasTeam = selectedProjects.every(
          project => (projectTeams[project.key]?.length || 0) > 0
        );
        const eachTeamHasMembers = selectedProjects.every(project =>
          projectTeams[project.key]?.every(team => (teamMembers[project.key]?.[team]?.length || 0) > 0)
        );
        return eachProjectHasTeam && eachTeamHasMembers;
      }
      case 3:
        // Test Configuration step - make sure each team has at least something configured
        return selectedProjects.every(project =>
          projectTeams[project.key]?.every(team => {
            const cfg = teamConfigs[project.key]?.[team];
            // If no config, it's still OK
            if (!cfg) return true;
            
            // For teams that have config, make sure they have something selected
            const hasSomething = (cfg.testItPaths && cfg.testItPaths.length > 0) || 
                                (cfg.sonarQubeProjects && cfg.sonarQubeProjects.length > 0 && 
                                 cfg.sonarQubeProjects.every(s => s.sonarProjects.length > 0));
            
            return hasSomething;
          })
        );
      default:
        return true;
    }
  };

  const isProjectValid = (project: string): boolean => {
    // project has >=1 team, and each selected team >=1 member
    if ((projectTeams[project]?.length || 0) === 0) return false;
    return projectTeams[project].every(team => (teamMembers[project]?.[team]?.length || 0) > 0);
  };

  // ----------------------------
  //    saveConfiguration
  // ----------------------------
  const saveConfiguration = async () => {
    const projectsMap: Record<
      string,
      {
        projectName: string;
        projectFullName: string | null;
        teams: Array<{
          name: string;
          members: string[];
          testItPaths: string[];
          sonarQubeProjects: Array<Record<string, string[]>>;
        }>;
      }
    > = {};
    
    selectedProjects.forEach(project => {
      const teamsForProject = projectTeams[project.key] || [];
      const formattedTeams = teamsForProject.map(team => {
        // Get the team config
        const myConfig = teamConfigs[project.key]?.[team];
        
        // Build sonarQube array
        const sonarQubeProjectsArr: Array<Record<string, string[]>> = 
          myConfig?.sonarQubeProjects.map(s => ({
            [s.sonarDomain]: s.sonarProjects
          })) || [];
        
        return {
          name: team,
          members: teamMembers[project.key]?.[team] || [],
          testItPaths: myConfig?.testItPaths || [], // Using new paths format
          sonarQubeProjects: sonarQubeProjectsArr
        };
      });
      
      projectsMap[project.key] = {
        projectFullName: project.name,
        projectName: project.key,
        teams: formattedTeams
      };
    });
    
    const payload = {
      organization: selectedOrg,
      projects: projectsMap
    };
    
    console.log('Payload:', payload);
    
    // Check if existing org => PUT, else POST
    try {
      if (orgIdMap[selectedOrg]) {
        const orgId = orgIdMap[selectedOrg];
        console.log('Updating existing org with ID:', orgId);
        await AdminConfigService.updateOrganizationConfig(orgId, payload);
      } else {
        console.log('Creating new org config...');
        await AdminConfigService.createOrganizationConfig(payload);
      }
      showSnackbar('Configuration saved successfully!', 'success');
      resetForm();
    } catch (error) {
      console.error('Error saving configuration:', error);
      showSnackbar('Error saving configuration', 'error');
    }
  };

  const resetForm = () => {
    setActiveStep(0);
    setSelectedOrg('');
    setSelectedProjects([]);
    setProjectTeams({});
    setTeamMembers({});
    setActiveTeam('');
    setCurrentProjectIndex(0);
    setSelectAllStatus({});
    setTeamConfigs({});
  };

  // ----------------------------
  //     Add Handlers for config
  // ----------------------------
  // Step 4: test config
  const handleTeamConfigChange = (
    project: string,
    team: string,
    config: TeamConfig
  ) => {
    setTeamConfigs(prev => ({
      ...prev,
      [project]: {
        ...prev[project],
        [team]: config
      }
    }));
  };

  // ----------------------------
  //    UI Helpers
  // ----------------------------
  const showSnackbar = (
    message: string,
    severity: 'success' | 'error' | 'info' | 'warning' = 'success'
  ) => {
    setSnackbarMessage(message);
    setSnackbarSeverity(severity);
    setSnackbarOpen(true);
  };

  return (
    <Box>
      {/* Stepper */}
      <Stepper activeStep={activeStep} alternativeLabel sx={{ mb: 3 }}>
        {steps.map((label) => (
          <Step key={label}>
            <StepLabel>{label}</StepLabel>
          </Step>
        ))}
      </Stepper>
      {/* Step Content */}
      <Paper elevation={2} sx={{ p: 3, mb: 3 }}>
        {/* Step 1: Organization */}
        {activeStep === 0 && (
          <OrganizationStep
            selectedOrg={selectedOrg}
            organizations={organizations}
            orgIdMap={orgIdMap}
            onOrgSelect={handleOrgSelect}
            onDeleteOrg={handleDeleteOrg}
            onAddNewOrg={handleAddNewOrg}
          />
        )}
        {/* Step 2: Projects */}
        {activeStep === 1 && (
          <ProjectsStep
            selectedOrg={selectedOrg}
            projects={projects}
            selectedProjects={selectedProjects}
            onProjectToggle={handleProjectToggle}
          />
        )}
        {/* Step 3: Teams & Members */}
        {activeStep === 2 && (
          <TeamsAndMembersStep
            selectedProjects={selectedProjects}
            currentProjectIndex={currentProjectIndex}
            projectTeams={projectTeams}
            teamMembers={teamMembers}
            teams={teams}
            activeTeam={activeTeam}
            selectAllStatus={selectAllStatus}
            onProjectTabChange={handleProjectTabChange}
            onTeamCheckbox={handleTeamCheckbox}
            onSetActiveTeam={handleSetActiveTeam}
            onTeamMemberToggle={handleTeamMemberToggle}
            onToggleAllMembers={handleToggleAllMembers}
            isProjectValid={isProjectValid}
          />
        )}
        {/* Step 4: Test Config */}
        {activeStep === 3 && (
          <TestConfigStep
            selectedProjects={selectedProjects}
            projectTeams={projectTeams}
            currentProjectIndex={currentProjectIndex}
            teamConfigs={teamConfigs}
            onProjectTabChange={handleProjectTabChange}
            onTeamConfigChange={handleTeamConfigChange}
          />
        )}
        {/* Step 5: Review */}
        {activeStep === 4 && (
          <ReviewStep
            selectedOrg={selectedOrg}
            selectedProjects={selectedProjects}
            projectTeams={projectTeams}
            teamMembers={teamMembers}
            teamConfigs={teamConfigs}
          />
        )}
      </Paper>
      {/* Navigation Buttons */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>
        <Button
          variant="outlined"
          disabled={activeStep === 0}
          onClick={handleBack}
          startIcon={<ArrowBackIcon />}
        >
          Back
        </Button>
        <Button
          variant="contained"
          onClick={handleNext}
          disabled={!isStepValid()}
          endIcon={activeStep === steps.length - 1 ? <SaveIcon /> : <ArrowForwardIcon />}
          color={activeStep === steps.length - 1 ? 'success' : 'primary'}
        >
          {activeStep === steps.length - 1 ? 'Save Configuration' : 'Next'}
        </Button>
      </Box>
      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={4000}
        onClose={() => setSnackbarOpen(false)}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
      >
        <Alert
          onClose={() => setSnackbarOpen(false)}
          severity={snackbarSeverity}
          variant="filled"
          sx={{ width: '100%' }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
};
