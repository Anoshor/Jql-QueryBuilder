// src/App.tsx
import React, { useState, useEffect } from 'react';
import { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from '@apollo/client';

// Initialize Apollo Client
const client = new ApolloClient({
  uri: 'http://localhost:4000',
  cache: new InMemoryCache()
});

// GraphQL query to get organization metrics
const GET_ORGANIZATION_METRICS = gql`
  query GetOrganizationMetrics($orgName: String!) {
    getOrganizationMetrics(orgName: $orgName) {
      name
      aggregatedMetrics {
        name
        values
        average
        total
      }
      projects {
        name
      }
    }
  }
`;

// GraphQL query to get project metrics
const GET_PROJECT_METRICS = gql`
  query GetProjectMetrics($orgName: String!, $projectName: String!) {
    getProjectMetrics(orgName: $orgName, projectName: $projectName) {
      name
      aggregatedMetrics {
        name
        values
        average
        total
      }
      teams {
        name
      }
    }
  }
`;

const MetricsConsole: React.FC = () => {
  const [orgName, setOrgName] = useState('RingCX');
  const [projectName, setProjectName] = useState('');
  
  // Query for organization metrics
  const { loading: orgLoading, error: orgError, data: orgData } = useQuery(
    GET_ORGANIZATION_METRICS, 
    { variables: { orgName } }
  );
  
  // Query for project metrics if a project is selected
  const { loading: projectLoading, error: projectError, data: projectData } = useQuery(
    GET_PROJECT_METRICS, 
    { 
      variables: { orgName, projectName },
      skip: !projectName // Skip this query if no project is selected
    }
  );

  // Log data to console whenever it changes
  useEffect(() => {
    if (orgData) {
      console.log('Organization Data:', orgData);
      console.log(`Aggregated metrics for "${orgName}":`);
      orgData.getOrganizationMetrics.aggregatedMetrics.forEach((metric: any) => {
        console.log(`  ${metric.name}:`);
        console.log(`    Values: ${metric.values.join(', ')}`);
        console.log(`    Average: ${metric.average.toFixed(2)}`);
        console.log(`    Total: ${metric.total}`);
      });
    }
  }, [orgData, orgName]);

  useEffect(() => {
    if (projectData) {
      console.log('Project Data:', projectData);
      console.log(`Aggregated metrics for "${orgName}/${projectName}":`);
      projectData.getProjectMetrics.aggregatedMetrics.forEach((metric: any) => {
        console.log(`  ${metric.name}:`);
        console.log(`    Values: ${metric.values.join(', ')}`);
        console.log(`    Average: ${metric.average.toFixed(2)}`);
        console.log(`    Total: ${metric.total}`);
      });
    }
  }, [projectData, orgName, projectName]);

  if (orgLoading) return <p>Loading organization data...</p>;
  if (orgError) return <p>Error: {orgError.message}</p>;
  if (projectLoading) return <p>Loading project data...</p>;
  if (projectError) return <p>Error: {projectError.message}</p>;

  return (
    <div style={{ padding: '20px' }}>
      <h1>Metrics Data Console Output</h1>
      <p>Open your browser console (F12) to see the data output.</p>
      
      <div style={{ marginBottom: '20px' }}>
        <label style={{ display: 'block', marginBottom: '5px' }}>Select Organization:</label>
        <select 
          value={orgName} 
          onChange={(e) => {
            setOrgName(e.target.value);
            setProjectName(''); // Reset project when org changes
          }}
          style={{ padding: '8px', minWidth: '200px' }}
        >
          <option value="RingCX">RingCX</option>
          <option value="VoiceAI">VoiceAI</option>
        </select>
      </div>
      
      {orgData?.getOrganizationMetrics && (
        <div style={{ marginBottom: '20px' }}>
          <label style={{ display: 'block', marginBottom: '5px' }}>Select Project:</label>
          <select 
            value={projectName} 
            onChange={(e) => setProjectName(e.target.value)}
            style={{ padding: '8px', minWidth: '200px' }}
          >
            <option value="">All Projects (Organization Level)</option>
            {orgData.getOrganizationMetrics.projects.map((project: any) => (
              <option key={project.name} value={project.name}>{project.name}</option>
            ))}
          </select>
        </div>
      )}
      
      <div style={{ 
        marginTop: '30px', 
        padding: '15px', 
        backgroundColor: '#f5f5f5', 
        borderRadius: '5px',
        border: '1px solid #ddd' 
      }}>
        <h3>Current Selection:</h3>
        <p><strong>Organization:</strong> {orgName}</p>
        <p><strong>Project:</strong> {projectName || 'All Projects (Organization Level)'}</p>
        <p>Data has been logged to the console. Press F12 to view the console output.</p>
      </div>
    </div>
  );
};

const App: React.FC = () => {
  return (
    <ApolloProvider client={client}>
      <MetricsConsole />
    </ApolloProvider>
  );
};

export default App;
