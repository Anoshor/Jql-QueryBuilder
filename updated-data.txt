import { Box, Card, Divider, IconButton, MenuItem, Select, SelectChangeEvent, Switch, Typography, useTheme, Dialog, DialogTitle, DialogContent, DialogActions, TextField, Button, Paper, List, ListItem, ListItemText, Collapse } from "@mui/material";
import { tokens } from "../theme";
import React, { useState } from "react";
import BarChart from "./BarChart";
import LineChart from "./LineChart"; 
import { MonthlyMetricsType2 } from "../functions/getMonthlyMetrics";
import { changeQuarterlyData } from "../functions/changeQuarterlyData";
import PushPinIcon from "@mui/icons-material/PushPin";
import NoteAddIcon from "@mui/icons-material/NoteAdd";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";

interface DataProps {
  child?: React.JSX.Element,
  title: string,
  data: MonthlyMetricsType2,
  onPin: () => void,
  isPinned: boolean,
  note?: string,
  onNoteChange: (value: string) => void,
  showNote: boolean,
  setShowNote: (value: React.SetStateAction<boolean>) => void,
  barNotes: Record<string, string>,
  onBarNoteChange: (month: string, value: string) => void
}

export default function Data({ 
  child, 
  title, 
  data, 
  onPin, 
  isPinned, 
  note, 
  onNoteChange, 
  showNote, 
  setShowNote,
  barNotes = {},
  onBarNoteChange
}: DataProps) {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  const [chartType, setChartType] = useState("BarChart");
  const [toggle, setToggle] = useState(false);

  // Dialog state
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [selectedMonth, setSelectedMonth] = useState('');
  const [selectedValue, setSelectedValue] = useState(0);
  const [noteText, setNoteText] = useState('');
  const [isEditing, setIsEditing] = useState(false);

  const handleChange = (event: SelectChangeEvent<string>) => {
    setChartType(event.target.value as string);
  };

  const handleToggle = (event: React.ChangeEvent<HTMLInputElement>) => {
    setToggle(event.target.checked);
  };

  // Handle bar click in chart
  const handleBarClick = (month, value) => {
    setSelectedMonth(month);
    setSelectedValue(value);
    setNoteText(barNotes[month] || '');
    setIsDialogOpen(true);
    setIsEditing(false);
  };

  // Save note for specific bar
  const handleSaveNote = () => {
    onBarNoteChange(selectedMonth, noteText);
    setIsDialogOpen(false);
  };

  // Delete note for specific bar
  const handleDeleteNote = (month) => {
    onBarNoteChange(month, ''); // Empty string to effectively delete
    
    if (isDialogOpen) {
      setIsDialogOpen(false);
    }
  };

  // Edit an existing note
  const handleEditNote = (month, value) => {
    setSelectedMonth(month);
    setSelectedValue(value);
    setNoteText(barNotes[month] || '');
    setIsDialogOpen(true);
    setIsEditing(true);
  };

  // Check if there are any bar notes
  const hasBarNotes = Object.keys(barNotes).length > 0;

  return (
    <Card sx={{ borderRadius: '20px', boxShadow: 4, padding: "2vh", width: '100%', height: 'auto' }}>
      <Box sx={{ display: 'flex', justifyContent: "space-between", alignItems: 'center', marginBottom: "1%", padding: "0 1%" }}>
        <Typography variant="h3" color={colors.grey[100]}>
          {title}
        </Typography>
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Select 
            style={{ width: 'fit-content', height: '40px', margin: '5px' }} 
            value={chartType} 
            onChange={handleChange} 
            label="Chart Type"
          >
            <MenuItem value={"BarChart"}>Bar</MenuItem>
            <MenuItem value={"LineChart"}>Line</MenuItem>
          </Select>
          <Switch
            checked={toggle}
            onChange={handleToggle}
            color="primary"
            inputProps={{ 'aria-label': 'primary checkbox' }}
          />
          <Typography variant="h6" color={colors.grey[100]}>
            {toggle ? "Quarterly" : "Monthly"}
          </Typography>
          <IconButton onClick={onPin} color={isPinned ? "primary" : "default"} sx={{ marginLeft: 1 }}>
            <PushPinIcon />
          </IconButton>
          <IconButton 
            onClick={() => setShowNote((prev) => !prev)} 
            color={showNote || hasBarNotes ? "primary" : "default"} 
            sx={{ marginLeft: 1 }}
          >
            <NoteAddIcon />
          </IconButton>
        </Box>
      </Box>
      <Divider />
      
      <Box sx={{ padding: "1%" }}>
        {child ? child : (
          chartType === "BarChart" ? (
            <BarChart 
              title={title} 
              data={!toggle ? data : changeQuarterlyData(data)} 
              onBarClick={handleBarClick}
              barNotes={barNotes}
            />
          ) : (
            <LineChart 
              title={title} 
              data={!toggle ? data : changeQuarterlyData(data)}
            />
          )
        )}
      </Box>

      {/* Notes section */}
      <Collapse in={showNote}>
        <Box sx={{ mt: 2, p: 1 }}>
          {/* Card-level notes */}
          <Typography variant="subtitle1" fontWeight="bold" sx={{ mb: 1 }}>
            Chart Notes:
          </Typography>
          <TextField
            fullWidth
            variant="outlined"
            placeholder="Add general notes about this metric..."
            value={note || ""}
            onChange={(e) => onNoteChange(e.target.value)}
            multiline
            rows={2}
            sx={{ mb: 2 }}
          />
          
          {/* Bar-specific notes list */}
          {hasBarNotes && (
            <>
              <Typography variant="subtitle1" fontWeight="bold" sx={{ mt: 2, mb: 1 }}>
                Data Point Notes:
              </Typography>
              <Paper elevation={1} sx={{ p: 1, maxHeight: '200px', overflow: 'auto' }}>
                <List dense>
                  {Object.entries(barNotes).filter(([_, note]) => note && note.trim() !== '').map(([month, noteText]) => (
                    <ListItem 
                      key={month}
                      secondaryAction={
                        <Box>
                          <IconButton edge="end" size="small" onClick={() => handleEditNote(month, data?.datasets?.[0]?.data[data.labels.indexOf(month)] || 0)}>
                            <EditIcon fontSize="small" />
                          </IconButton>
                          <IconButton edge="end" size="small" onClick={() => handleDeleteNote(month)}>
                            <DeleteIcon fontSize="small" />
                          </IconButton>
                        </Box>
                      }
                      sx={{
                        border: '1px solid',
                        borderColor: theme.palette.divider,
                        borderRadius: 1,
                        mb: 1,
                        '&:last-child': {
                          mb: 0
                        }
                      }}
                    >
                      <ListItemText
                        primary={<Typography variant="body2" fontWeight="bold">{month}</Typography>}
                        secondary={
                          <Typography 
                            variant="body2" 
                            color="text.secondary"
                            sx={{ 
                              whiteSpace: 'pre-wrap',
                              overflow: 'hidden',
                              textOverflow: 'ellipsis'
                            }}
                          >
                            {noteText}
                          </Typography>
                        }
                      />
                    </ListItem>
                  ))}
                </List>
              </Paper>
            </>
          )}

          {!hasBarNotes && (
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1, fontStyle: 'italic' }}>
              Click on any bar in the chart to add notes for specific data points.
            </Typography>
          )}
        </Box>
      </Collapse>

      {/* Bar-specific note dialog */}
      <Dialog open={isDialogOpen} onClose={() => setIsDialogOpen(false)} fullWidth maxWidth="sm">
        <DialogTitle>
          {isEditing ? 'Edit' : 'Add'} Note for {selectedMonth}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ mb: 2, mt: 1 }}>
            <Typography variant="body2" color="text.secondary">
              Value: {selectedValue}
            </Typography>
          </Box>
          <TextField
            autoFocus
            label="Note"
            multiline
            rows={4}
            fullWidth
            value={noteText}
            onChange={(e) => setNoteText(e.target.value)}
            variant="outlined"
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsDialogOpen(false)}>Cancel</Button>
          <Button onClick={handleSaveNote} color="primary" variant="contained">
            Save
          </Button>
          {barNotes[selectedMonth] && (
            <Button 
              onClick={() => handleDeleteNote(selectedMonth)} 
              color="error"
            >
              Delete Note
            </Button>
          )}
        </DialogActions>
      </Dialog>
    </Card>
  );
}
